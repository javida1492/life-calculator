{"version":3,"sources":["image1.png","utils/tableData.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","tableData1","category","fixedCosts","tableData2","monthlySpendingCategories","monthlySpendingPercentage","monthlySpendingGoals","tableData3","businessProfitMargins","monthlyRevenueNeeded","annualRevenueNeeded","tableData4","year","savings","monthlyAssetIncome","annualAssetIncome","percentReturn","tableData5","monthlyIncome","recommendedMonthlyIncome","personalAnnualIncome","headerTable","Table","props","onCellChange","index","value","tableNum","updateTable1","updateTable2","updateTable3","data","state","tableData","setState","updateTable4","updateTable5","bind","this","total","i","length","dataT2","percentageTotal","alert","updateMonthlyGoals","dataT5","call","dataT3","dataT4","compoundTotal","console","log","dataT1","table","map","key","style","backgroundColor","class","type","step","onChange","e","parseFloat","target","myTable","id","renderTableHeaders","renderTableData","Component","App","className","height","width","src","logo","alt","marginLeft","marginRight","align","margin","fontWeight","fontSize","borderTop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa2f7317.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image1.b1c312d4.png\";","export default {\r\n  tableData1: [\r\n    { category: \"Rent/Mortgages\", fixedCosts: 20000 },\r\n    { category: \"Utilities\", fixedCosts: 5000 },\r\n    { category: \"Cell Phone\", fixedCosts: 250 },\r\n    { category: \"Health Insurance\", fixedCosts: 1250 },\r\n    { category: \"Car Payments\", fixedCosts: 4000 },\r\n    { category: \"Gas\", fixedCosts: 1000 },\r\n    { category: \"Food\", fixedCosts: 1500 },\r\n    { category: \"Clothes\", fixedCosts: 1000 },\r\n    { category: \"Subscriptions\", fixedCosts: 1000 },\r\n    { category: \"Car Insurance\", fixedCosts: 400 },\r\n    { category: \"Total\", fixedCosts: 35400 }\r\n  ],\r\n  tableData2: [\r\n    {\r\n      monthlySpendingCategories: \"Fixed Costs\",\r\n      monthlySpendingPercentage: 50,\r\n      monthlySpendingGoals: 10000\r\n    },\r\n    {\r\n      monthlySpendingPercentage: 10,\r\n      monthlySpendingCategories: \"Long Term Investments\",\r\n      monthlySpendingGoals: 2000\r\n    },\r\n    {\r\n      monthlySpendingPercentage: 10,\r\n      monthlySpendingCategories: \"Savings Short Term\",\r\n      monthlySpendingGoals: 2000\r\n    },\r\n    {\r\n      monthlySpendingPercentage: 10,\r\n      monthlySpendingCategories: \"Guilt Free Spending\",\r\n      monthlySpendingGoals: 2000\r\n    },\r\n    {\r\n      monthlySpendingPercentage: 20,\r\n      monthlySpendingCategories: \"Taxes\",\r\n      monthlySpendingGoals: 4000\r\n    }\r\n  ],\r\n  tableData3: [\r\n    {\r\n      businessProfitMargins: 50,\r\n      monthlyRevenueNeeded: 40000,\r\n      annualRevenueNeeded: 480000\r\n    }\r\n  ],\r\n  tableData4: [\r\n    {\r\n      year: 1,\r\n      savings: 48000,\r\n      monthlyAssetIncome: 400,\r\n      annualAssetIncome: 4800,\r\n      percentReturn: 10\r\n    },\r\n    {\r\n      year: 2,\r\n      savings: 100800,\r\n      monthlyAssetIncome: 840,\r\n      annualAssetIncome: 10080\r\n    },\r\n    {\r\n      year: 3,\r\n      savings: 158880,\r\n      monthlyAssetIncome: 1324,\r\n      annualAssetIncome: 15888\r\n    },\r\n    {\r\n      year: 4,\r\n      savings: 222768,\r\n      monthlyAssetIncome: 1856,\r\n      annualAssetIncome: 22277\r\n    },\r\n    {\r\n      year: 5,\r\n      savings: 293045,\r\n      monthlyAssetIncome: 2442,\r\n      annualAssetIncome: 29304\r\n    }\r\n  ],\r\n  tableData5: [\r\n    {\r\n      monthlyIncome: 20000,\r\n      recommendedMonthlyIncome: 70800,\r\n      personalAnnualIncome: 240000\r\n    }\r\n  ],\r\n  headerTable:[\r\n    [\"Category\", \"Fixed Costs\"],\r\n    [\"Monthly Income\", \"Recommended Monthly Income\", \"Personal Annual Income\"],\r\n    [\"Monthly Spending Categories\", \"Monthly Spending Percentages\", \"Monthly Spending Goals\"],\r\n    [\"Year\", \"Savings\", \"Monthly Assets Income\", \"Annual Assets Income\", \"Percent Return\"],\r\n    [\"Business Profit Margins\", \"Monthly Revenue Needed\", \"Annual Revenue Needed\"]\r\n  ]\r\n\r\n};\r\n","import React, { Component } from \"react\";\r\nimport tableData from \"../utils/tableData\";\r\nimport \"../styles/tableStyle.css\";\r\nimport \"../styles/inputStyle.css\";\r\n\r\nclass Table extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tableData,\r\n      tableNum: 1\r\n    };\r\n    this.onCellChange = this.onCellChange.bind(this);\r\n  }\r\n\r\n  updateTable1(index, value) {\r\n    let data = [...this.state.tableData.tableData1];\r\n    if (index !== 10) {\r\n      data[index].fixedCosts = value;\r\n\r\n      let total = 0;\r\n      data[10].fixedCosts = total;\r\n\r\n      for (var i = 0; i < data.length - 1; i++) {\r\n        total += data[i].fixedCosts; //Update new total\r\n      }\r\n      data[10].fixedCosts = total;\r\n      this.setState({ data });\r\n      this.updateTable5(value, 1);\r\n    }\r\n  }\r\n\r\n  updateTable2(index, value) {\r\n    //Update table 2 values based on monthly income\r\n    let dataT2 = [...this.state.tableData.tableData2];\r\n    //Update monthly percentage\r\n    dataT2[index].monthlySpendingPercentage = value; //Update percentage\r\n    let percentageTotal = 0;\r\n    for (var i = 0; i < 5; i++) {\r\n      percentageTotal += dataT2[i].monthlySpendingPercentage;\r\n    }\r\n    if (percentageTotal > 100) {\r\n      alert(\"Monthly Spending Percentage must not exceed 100%!\");\r\n    }\r\n\r\n    this.setState({ dataT2 });\r\n    this.updateMonthlyGoals(); //Recalculate monthly spending goals\r\n    this.updateTable4();\r\n    this.updateTable5(value, 1);\r\n  }\r\n\r\n  updateMonthlyGoals() {\r\n    let dataT2 = [...this.state.tableData.tableData2];\r\n    let dataT5 = [...this.state.tableData.tableData5];\r\n    for (var i = 0; i < 5; i++) {\r\n      dataT2[i].monthlySpendingGoals =\r\n        dataT5[0].monthlyIncome * (dataT2[i].monthlySpendingPercentage / 100);\r\n    }\r\n    this.setState({ dataT2 });\r\n  }\r\n\r\n  updateTable3(value, call) {\r\n    let dataT5 = [...this.state.tableData.tableData5];\r\n    let dataT3 = [...this.state.tableData.tableData3];\r\n    if (!call) {\r\n      dataT3[0].businessProfitMargins = value;\r\n    }\r\n    dataT3[0].annualRevenueNeeded =\r\n      dataT5[0].personalAnnualIncome / (dataT3[0].businessProfitMargins / 100);\r\n    dataT3[0].monthlyRevenueNeeded = dataT3[0].annualRevenueNeeded / 12;\r\n    this.setState({ dataT3 });\r\n  }\r\n\r\n  updateTable4() {\r\n    let dataT2 = [...this.state.tableData.tableData2];\r\n    let dataT4 = [...this.state.tableData.tableData4];\r\n    let compoundTotal = 0; //Keep a running total of the annual asset income\r\n\r\n    for (var i = 0; i < 5; i++) {\r\n      if (i === 0) {\r\n        dataT4[i].savings =\r\n          (dataT2[1].monthlySpendingGoals + dataT2[2].monthlySpendingGoals) *\r\n          12;\r\n      } else {\r\n        compoundTotal += dataT4[i - 1].annualAssetIncome;\r\n        dataT4[i].savings = dataT4[0].savings * (i + 1) + compoundTotal;\r\n      }\r\n      console.log(dataT4[0].percentReturn);\r\n      dataT4[i].monthlyAssetIncome =\r\n        dataT4[i].savings * (dataT4[0].percentReturn / 100 / 12);\r\n      //dataT4[i].monthlyAssetIncome = parseFloat(dataT4[i].monthlyAssetIncome.toFixed(2));\r\n      dataT4[i].annualAssetIncome =\r\n        dataT4[i].savings * (dataT4[0].percentReturn / 100);\r\n      //dataT4[i].annualAssetIncome = parseFloat(dataT4[i].annualAssetIncome.toFixed(2));\r\n    }\r\n    this.setState({ dataT4 });\r\n  }\r\n\r\n  updateTable5(value, call) {\r\n    let data = [...this.state.tableData.tableData5];\r\n    let dataT1 = [...this.state.tableData.tableData1];\r\n    let dataT2 = [...this.state.tableData.tableData2];\r\n    if (call) {\r\n      data[0].recommendedMonthlyIncome =\r\n        dataT1[10].fixedCosts / (dataT2[0].monthlySpendingPercentage / 100);\r\n      this.setState({ data });\r\n    } else {\r\n      data[0].monthlyIncome = value;\r\n      data[0].personalAnnualIncome = data[0].monthlyIncome * 12;\r\n      this.setState({ data });\r\n      this.updateMonthlyGoals();\r\n      this.updateTable3(value, 1);\r\n    }\r\n  }\r\n\r\n  // TODO - Fix the updateTable functions\r\n  onCellChange = (index, value, tableNum) => {\r\n    if (tableNum === 1) {\r\n      this.updateTable1(index, value);\r\n    } else if (tableNum === 2) {\r\n      this.updateTable2(index, value);\r\n    } else if (tableNum === 3) {\r\n      this.updateTable3(value);\r\n    } else if (tableNum === 4) {\r\n      let data = [...this.state.tableData.tableData4];\r\n      data[0].percentReturn = value;\r\n      this.setState({ data });\r\n      this.updateTable4();\r\n    } else if (tableNum === 5) {\r\n      this.updateTable5(value);\r\n    }\r\n  };\r\n\r\n  renderTableData(table) {\r\n    let myTable;\r\n    switch (table) {\r\n      case 1:\r\n        myTable = this.state.tableData.tableData1;\r\n        return myTable.map((data, index) => {\r\n          const { category, fixedCosts } = data; //destructuring\r\n          return (\r\n            <tr\r\n              key={category}\r\n              style={{ backgroundColor: \"black\" }}\r\n              class=\"white-text\"\r\n            >\r\n              <td>{category}</td>\r\n              <td>\r\n                <input\r\n                  type=\"number\"\r\n                  value={fixedCosts}\r\n                  step=\".01\"\r\n                  onChange={e =>\r\n                    this.onCellChange(index, parseFloat(e.target.value), 1)\r\n                  }\r\n                />\r\n              </td>\r\n            </tr>\r\n          );\r\n        });\r\n      case 2:\r\n        myTable = this.state.tableData.tableData2;\r\n        return myTable.map((data, index) => {\r\n          const {\r\n            monthlySpendingCategories,\r\n            monthlySpendingPercentage,\r\n            monthlySpendingGoals\r\n          } = data; //destructuring\r\n          return (\r\n            <tr key={monthlySpendingCategories}>\r\n              <td>{monthlySpendingCategories}</td>\r\n              <td>\r\n                <input\r\n                  type=\"number\"\r\n                  value={monthlySpendingPercentage}\r\n                  step=\".01\"\r\n                  onChange={e =>\r\n                    this.onCellChange(index, parseFloat(e.target.value), 2)\r\n                  }\r\n                />\r\n              </td>\r\n              <td>{monthlySpendingGoals}</td>\r\n            </tr>\r\n          );\r\n        });\r\n      case 3:\r\n        myTable = this.state.tableData.tableData3;\r\n        return myTable.map((data, index) => {\r\n          const {\r\n            businessProfitMargins,\r\n            monthlyRevenueNeeded,\r\n            annualRevenueNeeded\r\n          } = data; //destructuring\r\n          return (\r\n            <tr key={businessProfitMargins}>\r\n              <td>\r\n                <input\r\n                  type=\"number\"\r\n                  value={businessProfitMargins}\r\n                  step=\".01\"\r\n                  onChange={e =>\r\n                    this.onCellChange(index, parseFloat(e.target.value), 3)\r\n                  }\r\n                />\r\n              </td>\r\n              <td>{monthlyRevenueNeeded}</td>\r\n              <td>{annualRevenueNeeded}</td>\r\n            </tr>\r\n          );\r\n        });\r\n      case 4:\r\n        myTable = this.state.tableData.tableData4;\r\n        return myTable.map((data, index) => {\r\n          const {\r\n            year,\r\n            savings,\r\n            monthlyAssetIncome,\r\n            annualAssetIncome,\r\n            percentReturn\r\n          } = data; //destructuring\r\n          return (\r\n            <tr\r\n              key={year}\r\n              style={{ backgroundColor: \"black\" }}\r\n              class=\"white-text\"\r\n            >\r\n              <td>{year}</td>\r\n              <td>{savings}</td>\r\n              <td>{monthlyAssetIncome}</td>\r\n              <td>{annualAssetIncome}</td>\r\n              <td>\r\n                <input\r\n                  type=\"number\"\r\n                  value={percentReturn}\r\n                  step=\".01\"\r\n                  onChange={e =>\r\n                    this.onCellChange(index, parseFloat(e.target.value), 4)\r\n                  }\r\n                />\r\n              </td>\r\n            </tr>\r\n          );\r\n        });\r\n      case 5:\r\n        myTable = this.state.tableData.tableData5;\r\n        return myTable.map((data, index) => {\r\n          const {\r\n            monthlyIncome,\r\n            recommendedMonthlyIncome,\r\n            personalAnnualIncome\r\n          } = data; //destructuring\r\n          return (\r\n            <tr>\r\n              <td>\r\n                <input\r\n                  type=\"number\"\r\n                  value={monthlyIncome}\r\n                  step=\".01\"\r\n                  onChange={e =>\r\n                    this.onCellChange(index, parseFloat(e.target.value), 5)\r\n                  }\r\n                />\r\n              </td>\r\n              <td>{recommendedMonthlyIncome}</td>\r\n              <td>{personalAnnualIncome}</td>\r\n            </tr>\r\n          );\r\n        });\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  renderTableHeaders(table) {\r\n    let myTable;\r\n    switch (table) {\r\n      case 1:\r\n        myTable = this.state.tableData.headerTable[0];\r\n        break;\r\n      case 2:\r\n        myTable = this.state.tableData.headerTable[2];\r\n        break;\r\n      case 3:\r\n        myTable = this.state.tableData.headerTable[4];\r\n        break;\r\n      case 4:\r\n        myTable = this.state.tableData.headerTable[3];\r\n        break;\r\n      case 5:\r\n        myTable = this.state.tableData.headerTable[1];\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return myTable.map((key, index) => {\r\n      return <th key={index}>{key}</th>;\r\n    });\r\n  }\r\n\r\n  // Not using this function anymore since it would render the headers based on the object names, which werent style-able.\r\n  // Might revisit in the future since I...may be wrong about this LOL\r\n  /*renderTableHeader(table) {\r\n    let myTable;\r\n    switch (table) {\r\n      case 1:\r\n        myTable = this.state.tableData.tableData1[0];\r\n        break;\r\n      case 2:\r\n        myTable = this.state.tableData.tableData2[0];\r\n        break;\r\n      case 3:\r\n        myTable = this.state.tableData.tableData3[0];\r\n        break;\r\n      case 4:\r\n        myTable = this.state.tableData.tableData4[0];\r\n        break;\r\n      case 5:\r\n        myTable = this.state.tableData.tableData5[0];\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    let header = Object.keys(myTable);\r\n    return header.map((key, index) => {\r\n      return <th key={index}>{key.toUpperCase()}</th>;\r\n    });\r\n  }*/\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <table id=\"fixedCosts\">\r\n          <thead>\r\n            <tr>{this.renderTableHeaders(1)}</tr>\r\n          </thead>\r\n          {this.renderTableData(1)}\r\n        </table>\r\n        <table id=\"incomeTable\">\r\n          <thead>\r\n            <tr>{this.renderTableHeaders(5)}</tr>\r\n          </thead>\r\n          {this.renderTableData(5)}\r\n        </table>\r\n        <table id=\"monthlyTable\">\r\n          <thead>\r\n            <tr>{this.renderTableHeaders(2)}</tr>\r\n          </thead>\r\n          {this.renderTableData(2)}\r\n        </table>\r\n        <table id=\"assetsTable\">\r\n          <thead>\r\n            <tr>{this.renderTableHeaders(4)}</tr>\r\n          </thead>\r\n          {this.renderTableData(4)}\r\n        </table>\r\n        <table id=\"profitMargins\">\r\n          <thead>\r\n            <tr>{this.renderTableHeaders(3)}</tr>\r\n          </thead>\r\n          {this.renderTableData(3)}\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst Input = ({ onChange, value }) => (\r\n  <input type=\"number\" step=\".01\" onChange={onChange} value={value} />\r\n);\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\nimport Table from \"./components/Table\";\r\nimport Image from \"react-image-resizer\";\r\n\r\nimport logo from \"./image1.png\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"page\">\r\n        <Image\r\n          height={120}\r\n          width={750}\r\n          src={logo}\r\n          alt={\"logo\"}\r\n          style={{ marginLeft: \"auto\", marginRight: \"auto\" }}\r\n        />\r\n        <h1\r\n          id=\"title\"\r\n          align=\"center\"\r\n          style={{\r\n            margin: \"0 0 2rem 0\",\r\n            fontWeight: \"500\",\r\n            fontSize: \"50px\",\r\n            borderTop: \"1px solid black\"\r\n          }}\r\n        >\r\n          Ideal Life Calculator\r\n        </h1>\r\n        <div className=\"table\">\r\n          <Table />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"./index.css\";\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}